<div>
  Vacations to request
  <div class="vacations-request"></div>
</div>

<div>
  Vacations to cancel
  <div class="vacations-cancel"></div>
</div>

<div class="remaining-days"></div>

<button class="editButton" onclick="$.year_view.toggleEditMode();" data-in-edit-mode="false">Editar</button>
<button class="submit" onclick="$.year_view.submitVacations();" hidden>Submeter</button>

<div class="year_container">
  <div class="trimester">
    <% (1..4).to_a.each do |month_ord| %>
      <div class="month">
        <%= render "month", month_ord: month_ord %>
      </div>
    <% end %>
  </div>

  <div class="trimester">
    <% (5..8).to_a.each do |month_ord| %>
      <div class="month">
        <%= render "month", month_ord: month_ord %>
      </div>
    <% end %>
  </div>

  <div class="trimester">
    <% (9..12).to_a.each do |month_ord| %>
      <div class="month">
        <%= render "month", month_ord: month_ord %>
      </div>
    <% end %>
  </div>
</div>

<script>
  $.year_view = {
    initialize: function(config) {
      var self   = this,
          config = config || {};

      this.remainingDays      = config.remainingDays || 0;
      this.vacations          = config.vacations || [];
      this.vacationsToRequest = [];
      this.vacationsToCancel  = [];

      this.refreshInfo();

      $(".day").not(".not_this_month").on("click", function() {
        self.onDateClick(this);
      });
    },

    toggleEditMode: function() {
      if (this.inEditMode()) {
        $(".submit").prop("hidden", true);
        $(".editButton").data("in-edit-mode", false);
        $(".editButton").text("Editar");
      } else {
        $(".submit").prop("hidden", false);
        $(".editButton").data("in-edit-mode", true);
        $(".editButton").text("Terminar");
      }
    },

    refreshInfo: function() {
      var $request = $(".vacations-request"),
          $cancel  = $(".vacations-cancel"),
          diff       = this.remainingDays + this.vacationsToCancel.length - this.vacationsToRequest.length;

      $(".remaining-days").text(diff);

      $request.empty();
      $.each(this.vacationsToRequest, function(index, date) {
        $request.append("<p>" + date + "</p>");
      });

      $cancel.empty();
      $.each(this.vacationsToCancel, function(index, date) {
        $cancel.append("<p>" + date + "</p>");
      });
    },

    inEditMode: function() {
      return $(".editButton").data("in-edit-mode") == true;
    },

    onDateClick: function(element) {
      if (!this.inEditMode()) { return; }

      var $element = $(element),
          date     = $element.data("date"),
          weekday  = moment(date).day();

      if (weekday == 0 || weekday == 6) {
        window.alert("não vale marcar férias aos sabados e domingo ;)");
        return;
      }

      this.requestOrCancelVacation($element, date);

      this.refreshInfo();
    },

    requestOrCancelVacation: function($element, date) {
      var index = this.vacationsToRequest.indexOf(date);
      if (index >= 0) {
        this.vacationsToRequest.splice(index, 1);
        $element.css("background-color", "");

        return;
      }

      index = this.vacationsToCancel.indexOf(date);
      if (index >= 0) {
        this.vacationsToCancel.splice(index, 1);
        $element.css("background-color", "");

        return;
      }

      index = this.vacations.indexOf(date);
      if (index >= 0) {
        this.vacationsToCancel.push(date);
        $element.css("background-color", "red");
      } else {
        this.vacationsToRequest.push(date);
        $element.css("background-color", "blue");
      }
    },

    submitVacations: function() {
      $.ajax({
        url:  "bulk_update",
        type: "POST",
        date: {
          add:    [],
          cancel: []
        }
      });
    }
  };

  $(function() {
    $.year_view.initialize({
      remainingDays: <%= @home_presenter.remaining_leave_days %>
    });
  });
</script>